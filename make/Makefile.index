
# these will be embedded as virtual filesystem files
LIBRARY_FILES    := $(wildcard driver/library/*.js)

# these will be included in the page
FRONTEND_JS      :=                       \
	driver/utils/jsencrypt.js               \
	driver/utils/crypt.js                   \
	driver/utils/keymaster.js               \
	driver/library/sidebar.js               \
	driver/library/dom.js                   \
	driver/library/iso.js                   \
	$(wildcard engine/wasm/http/ace/*.js)   \
	engine/wasm/http/nipplejs.js            \
	$(wildcard engine/wasm/sys_*.js) 

FRONTEND_EMBEDS  :=                       \
	$(HTTP_SOURCE)/index.html               \
	$(HTTP_SOURCE)/index.css                \
	engine/renderer2/bigchars.png 

INDEX_FILES    := \
	$(FRONTEND_EMBEDS) $(FRONTEND_JS) \
	$(BUILD_DIR)/sys_worker.js

ifdef USE_UGLIFY



else



endif

morph.html: $(INDEX_FILES)
	$(Q)cp -r -f $(HTTP_SOURCE)/index.html $(BUILD_DIR)/morph.html
	cat $(FRONTEND_JS) > $(BUILD_DIR)/morph.js
	node -e "require('./engine/wasm/bin/make').normalBootstrap( \
		'$(BUILD_DIR)/morph.html', '$(BUILD_DIR)/morph.js')"
	node -e "require('./engine/wasm/bin/make').normalReplace( \
		'$(BUILD_DIR)/morph.html', '\n'  \
		+ require('./driver/library/quine.js').emitDownload + '\n' \
		+ require('./driver/library/repl.js').onFrontend + '\n' \
		+ require('./driver/library/auth.js').getRunId + '\n' \
		+ require('./driver/library/middleware.js').asyncTriggerMiddleware + '\n' \
		+ require('./driver/library/quine.js').encryptedResponseMiddleware + '\n' \
		+ require('./driver/library/quine.js').domMessageResponseMiddleware + '\n' \
		+ require('./driver/library/quine.js').installEncryptedAsyncMiddleware \
		+ '\ndomMessageResponseMiddleware();\n' );"
	node -e "require('./engine/wasm/bin/make').normalBase64( \
		'$(BUILD_DIR)/morph.html', '$(BUILD_DIR)/sys_worker.js', 'sys_worker.js')"
#	node -e "require('./engine/wasm/bin/make').normalEmbedAll( \
#		'$(BUILD_DIR)/morph.html', 'driver/library', 'driver/library/', 'library/')"

# basically, the above line is there until I can write a simple make/prolog parser
#   like this stupid failing dry-run.txt file I keep seeing, or add some other
#   obvious build process to the browser, so game files can be recompiled live.

index: morph.html  # morph.wasm 
	cp $(BUILD_DIR)/morph.html index.html

# LOL, kind of a funny solution, build these into service_worker.js to serve
#   individual files from cache, just so that I can keep packaging my page
#   but can also debug the code, chrome debugger refuses to load large files.
#   they must not have seen guys talk making fun of microsoft's poor console
#   rendering speed.

#	node -e "require('./engine/wasm/bin/make').normalBase64( \
#		'$(BUILD_DIR)/morph.html', '$(BUILD_DIR)/morph.wasm', 'morph.wasm')"
#	node -e "require('./engine/wasm/bin/make').normalEmbedAll( \
#		'$(BUILD_DIR)/morph.html', 'driver/cerebro', 'driver/', 'lobby/')"

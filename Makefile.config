.DEFAULT_GOAL      := morph

ifndef NO_LOCAL_MAKE
include Makefile.local
endif

################### TOOLS #################

ifndef COMPILE_PLATFORM
COMPILE_PLATFORM   := $(shell uname | sed -e 's/_.*//' | tr '[:upper:]' '[:lower:]' | sed -e 's/\//_/g')
endif
REMOVE             := rm -r -f 
NODE               := node -e 
MKDIR              := mkdir -p 
OPT                := wasm-opt 
# because Mac clang doesn't come with wasm support
LD                 := libs/$(COMPILE_PLATFORM)/wasi-sdk-14.0/bin/wasm-ld
CC                 := libs/$(COMPILE_PLATFORM)/wasi-sdk-14.0/bin/clang
CXX                := libs/$(COMPILE_PLATFORM)/wasi-sdk-14.0/bin/clang++
ifndef BUILD_DIR
BUILD_DIR          := build
endif

# echo_cmd is silent in verbose mode, makes sense
ifeq ($(V),1)
echo_cmd=@:
Q=
else
echo_cmd=@echo
Q=@
endif

SDL_WORKDIRS       := sdl sdl/audio sdl/events sdl/atomic sdl/thread \
											sdl/thread/generic sdl/timer/ sdl/timer/unix sdl/audio/emscripten
SDL_SOURCE         := libs/SDL2-2.0.14
MUSL_WORKDIRS      += musl musl/string 
MUSL_SOURCE        := libs/musl-1.2.2
ENGINE_WORKDIRS    := engine engine/client engine/renderer2 \
											engine/server engine/botlib
WORKDIRS           := $(ENGINE_WORKDIRS) $(MUSL_WORKDIRS) $(SDL_WORKDIRS)

################# FILES ###############

CLIENT_INCLUDES    :=  -Iengine/wasm/emscripten \
                       -I$(MUSL_SOURCE)/include \
                       -I$(SDL_SOURCE)/include \
                       -Iengine/wasm

ENGINE_CFLAGS      :=  -DGL_GLEXT_PROTOTYPES=1 \
                       -DGL_ARB_ES2_compatibility=1 \
                       -DGL_EXT_direct_state_access=1 \
                       -DUSE_Q3KEY \
                       -DUSE_MD5 \
                       -DUSE_ABS_MOUSE \
                       -DUSE_LAZY_LOAD \
                       -DUSE_LAZY_MEMORY \
                       -DUSE_MASTER_LAN

CLIENT_CFLAGS      :=  -Wall --target=wasm32 \
                       -Wimplicit -fstrict-aliasing \
											 -ftree-vectorize -fsigned-char -MMD \
                       -ffast-math -fno-short-enums \
											 -D_XOPEN_SOURCE=700 \
											 -D__WASM__ \
                       -std=gnu11

# debug exports all functions, and static names when .opt is not used
DEBUG_CFLAGS        := -fvisibility=default -fno-inline \
                       -DDEBUG -D_DEBUG -g -g3 -fPIC -gdwarf -gfull
# release removes function names and hides by default
RELEASE_CFLAGS      := -fvisibility=hidden \
                       -DNDEBUG -Ofast -O3 -Oz -fPIC -ffast-math



CLIENT_OBJS        := $(wildcard engine/client/*.c)
RENDER_OBJS        := $(wildcard engine/renderer2/*.c)
SERVER_OBJS        := $(wildcard engine/server/*.c)
COMMON_OBJS        := $(wildcard engine/qcommon/*.c)
BOTLIB_OBJS        := $(wildcard engine/botlib/*.c)
SYSTEM_OBJS        := $(wildcard engine/client/*.c)

TARGETS            := morph.wasm morph.html morph-plugin.zip \
											xxx-morph-vms.pk3 xxx-morph-files.pk3
SOURCE_FILE         = $(subst $(BUILD_DIR)/$1/,$2/,$(@:.o=.c))

############# GOALS ###################


SDL_FLAGS          := -Wno-macro-redefined \
											-DSDL_VIDEO_DISABLED=1 \
											-DSDL_JOYSTICK_DISABLED=1 \
											-DSDL_SENSOR_DISABLED=1 \
											-DSDL_HAPTIC_DISABLED=1 \
											-DSDL_TIMER_UNIX=1 \
											-DHAVE_CLOCK_GETTIME=1 \
											-D__EMSCRIPTEN__=1 \
											-D_GNU_SOURCE=1 \
											-DHAVE_STDLIB_H=1 \
											-DHAVE_UNISTD_H=1 \
											-DHAVE_MATH_H=1 \
											-DHAVE_GETENV=0 \
											-DHAVE_M_PI \
											-DSDL_THREADS_DISABLED=1 \
											-DSDL_AUDIO_DRIVER_EMSCRIPTEN=1 \
											$(CLIENT_INCLUDES)

$(BUILD_DIR)/sdl/%.o:
	$(echo_cmd) "SDL_CC $@"
	$(eval S := $(call SOURCE_FILE,sdl,$(SDL_SOURCE)/src))
	$(Q)$(CC) -o $@ $(SDL_FLAGS) $(CLIENT_CFLAGS) -c $S

$(BUILD_DIR)/musl/%.o:
	$(echo_cmd) "MUSL_CC $@"
	$(eval S := $(call SOURCE_FILE,musl,$(MUSL_SOURCE)/src))
	$(Q)$(CC) -o $@ $(MUSL_INCLUDE) $(MUSL_CFLAGS) -c $S

define DO_SAFE_MOVE
	-$(Q)$(MOVE) $< $<.bak 2> /dev/null
	$(Q)$(MOVE) $@ $< 2> /dev/null
	-$(Q)$(UNLINK) $<.bak 2> /dev/null
endef

clean: 
	-$(Q)$(addprefix $(REMOVE) $(BUILD_DIR)/,$(addsuffix /*  ; ,$(WORKDIRS)))
	-$(Q)$(addprefix $(REMOVE) $(BUILD_DIR)/,$(addsuffix  ; ,$(TARGETS)))

# TODO: this is the kind of thing perfect for a prolog transpiler, 
#   personal NO-NO, language inside a language
$(BUILD_DIR)/%.mkdir: $(filter $(MAKECMDGOALS),clean) 
	@if [ ! -d "./$(subst .mkdir,,$@)/$$dir" ]; \
		then $(MKDIR) "./$(subst .mkdir,,$@)/$$dir";fi;




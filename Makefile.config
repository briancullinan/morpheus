.DEFAULT_GOAL      := morph

ifndef NO_LOCAL_MAKE
include Makefile.local
endif

################### TOOLS #################

ifndef COMPILE_PLATFORM
COMPILE_PLATFORM   := $(shell uname | sed -e 's/_.*//' | tr '[:upper:]' '[:lower:]' | sed -e 's/\//_/g')
endif
UNLINK             := rm -f 
MOVE               := mv 
REMOVE             := rm -r -f 
NODE               := node -e 
MKDIR              := mkdir -p 
OPT                := wasm-opt 
# because Mac clang doesn't come with wasm support
LD                 := libs/$(COMPILE_PLATFORM)/wasi-sdk-14.0/bin/wasm-ld
CC                 := libs/$(COMPILE_PLATFORM)/wasi-sdk-14.0/bin/clang
CXX                := libs/$(COMPILE_PLATFORM)/wasi-sdk-14.0/bin/clang++
ifndef BUILD_DIR
BUILD_DIR          := build
endif

# echo_cmd is silent in verbose mode, makes sense
ifeq ($(V),1)
echo_cmd=@:
Q=
else
echo_cmd=@echo
Q=@
endif

SDL_WORKDIRS       := sdl sdl/audio sdl/events sdl/atomic sdl/thread \
											sdl/thread/generic sdl/timer/ sdl/timer/unix sdl/audio/emscripten
SDL_SOURCE         := libs/SDL2-2.0.14
MUSL_WORKDIRS      += musl musl/string musl/stdio musl/stdlib            \
											musl/signal   musl/errno  musl/math   musl/unistd    \
											musl/internal musl/time   musl/locale musl/network   \
											musl/select   musl/stat   musl/dirent musl/misc      \
											musl/fcntl    musl/ctype  musl/exit   musl/env       \
											musl/thread   musl/mman   musl/malloc musl/process   \
											musl/multibyte 
MUSL_SOURCE        := libs/musl-1.2.2
ENGINE_SOURCE      := engine
ENGINE_WORKDIRS    := engine engine/client engine/renderer2 \
											engine/server engine/botlib engine/qcommon \
											engine/wasm
WORKDIRS           := $(ENGINE_WORKDIRS) $(MUSL_WORKDIRS) $(SDL_WORKDIRS)

#D_DIRS  := $(addprefix $(BUILD_DIR)/,$(WORKDIRS))
D_FILES := $(shell find $(BUILD_DIR)/** -name '*.d' 2>/dev/null)
ifneq ($(strip $(D_FILES)),)
include $(D_FILES)
endif

################# FILES ###############

CLIENT_INCLUDES    :=  -Iengine/wasm \
											 -Iengine/wasm/emscripten \
                       -I$(MUSL_SOURCE)/include \
                       -I$(SDL_SOURCE)/include 

# debug exports all functions, and static names when .opt is not used
DEBUG_CFLAGS        := -fvisibility=default -fno-inline \
                       -DDEBUG -D_DEBUG -g -g3 -fPIC -gdwarf -gfull
# release removes function names and hides by default
RELEASE_CFLAGS      := -fvisibility=hidden \
                       -DNDEBUG -Ofast -O3 -Oz -fPIC -ffast-math

CLIENT_CFLAGS      := -Wall --target=wasm32 \
                    	-Wimplicit -fstrict-aliasing \
											-ftree-vectorize -fsigned-char -MMD \
                      -ffast-math -fno-short-enums \
											-D_XOPEN_SOURCE=700 \
											-D__EMSCRIPTEN__=1 \
											-D__WASM__=1 \
                      -std=gnu11

RELEASE_LDFLAGS     := 
DEBUG_LDFLAGS       := -fvisibility=default -fno-inline

CLIENT_LDFLAGS      := -Wl,--import-memory -Wl,--import-table -Wl,--error-limit=200 \
                       -Wl,--no-entry --no-standard-libraries -Wl,--export-dynamic \
											 -Wl,--allow-undefined-file=engine/wasm/wasm.syms \
											 engine/wasm/wasi/libclang_rt.builtins-wasm32.a \
											 $(DEBUG_LDFLAGS)


CLIENT_OBJS        := $(wildcard engine/client/*.c)
RENDER_OBJS        := $(wildcard engine/renderer2/*.c) $(wildcard engine/renderer2/glsl/*.glsl)
SERVER_OBJS        := $(wildcard engine/server/*.c)
COMMON_OBJS        := $(wildcard engine/qcommon/*.c)
BOTLIB_OBJS        := $(wildcard engine/botlib/*.c)
SYSTEM_OBJS        := $(wildcard engine/wasm/*.c) # aka sys_main.o dlmalloc.o sbrk.o sdl_snd.o
ENGINE_OBJS        := $(CLIENT_OBJS:.c=.o) $($(RENDER_OBJS:.c=.o):.glsl=.o) $(SERVER_OBJS:.c=.o) \
											$(COMMON_OBJS:.c=.o) $(BOTLIB_OBJS:.c=.o) $(SYSTEM_OBJS:.c=.o)

TARGETS            := morph.wasm morph.html morph-plugin.zip \
											xxx-morph-vms.pk3 xxx-morph-files.pk3
SOURCE_FILE         = $(subst $(BUILD_DIR)/$1/,$2/,$(@:.o=.c))

############# GOALS ###################



############# SDL ###################

SDL_CFLAGS          := -Wno-macro-redefined \
											-DSDL_VIDEO_DISABLED=1 \
											-DSDL_JOYSTICK_DISABLED=1 \
											-DSDL_SENSOR_DISABLED=1 \
											-DSDL_HAPTIC_DISABLED=1 \
											-DSDL_TIMER_UNIX=1 \
											-DHAVE_CLOCK_GETTIME=1 \
											-D_GNU_SOURCE=1 \
											-DHAVE_STDLIB_H=1 \
											-DHAVE_UNISTD_H=1 \
											-DHAVE_MATH_H=1 \
											-DHAVE_GETENV=0 \
											-DHAVE_M_PI \
											-DSDL_THREADS_DISABLED=1 \
											-DSDL_AUDIO_DRIVER_EMSCRIPTEN=1 \
											$(CLIENT_INCLUDES)

$(BUILD_DIR)/sdl/%.o:
	$(echo_cmd) "SDL_CC $@"
	$(eval S := $(call SOURCE_FILE,sdl,$(SDL_SOURCE)/src))
	$(Q)$(CC) -o $@ $(CLIENT_CFLAGS) $(SDL_CFLAGS) -c $S

############# MUSL ###################

# ignore a bunsh of stuff

export MUSL_INCLUDE := -Ilibs/musl-1.2.2/arch/generic \
                       -Ilibs/musl-1.2.2/src/internal \
                       -Ilibs/musl-1.2.2/src/include

MUSL_CFLAGS        := -Wno-unused-variable -Wvariadic-macros -Wno-extra-semi \
											-Wno-shift-op-parentheses -Wno-c11-extensions \
											-Wno-dollar-in-identifier-extension -Wno-unused-function \
											-Wno-incompatible-pointer-types -Wno-logical-op-parentheses \
											-Wno-bitwise-op-parentheses -Wno-int-conversion \
											-Wno-tautological-constant-out-of-range-compare \
											-Wno-string-plus-int -Wno-unsupported-visibility \
											-Wno-strict-prototypes  \
											-Wno-bitwise-op-parentheses -Wno-gnu-include-next \
											-Wno-unknown-attributes -Wno-ignored-attributes \
											$(MUSL_INCLUDE) $(CLIENT_INCLUDES)

$(BUILD_DIR)/musl/%.o:
	$(echo_cmd) "MUSL_CC $@"
	$(eval S := $(call SOURCE_FILE,musl,$(MUSL_SOURCE)/src))
	$(Q)$(CC) -o $@ $(CLIENT_CFLAGS) $(MUSL_CFLAGS) -c $S


############# ENGINE ###################

# --trace-includes 
ENGINE_CFLAGS      :=  \
											 -DGL_GLEXT_PROTOTYPES=1 \
                       -DGL_ARB_ES2_compatibility=1 \
                       -DGL_EXT_direct_state_access=1 \
                       -DUSE_Q3KEY=1 \
                       -DUSE_MD5=1 \
											 -DUSE_RENDERER_DLOPEN=0 \
											 -DNO_VM_COMPILED=1 \
                       -DUSE_ABS_MOUSE=1 \
                       -DUSE_LAZY_LOAD=1 \
                       -DUSE_LAZY_MEMORY=1 \
                       -DUSE_MASTER_LAN=1 \
											 $(CLIENT_INCLUDES)

$(BUILD_DIR)/engine/client/%.o:
	$(echo_cmd) "ENGINE_CC $@"
	$(eval S := $(call SOURCE_FILE,engine,$(ENGINE_SOURCE)))
	$(Q)$(CC) -o $@ $(CLIENT_CFLAGS) $(ENGINE_CFLAGS) -c $S

$(BUILD_DIR)/engine/renderer2/glsl/%.c:
	$(echo_cmd) "REF_STR $@"
	$(Q)echo "const char *fallbackShader_$(notdir $(basename $(@:.c=.glsl))) =" >> $@
	$(Q)cat $(@:.c=.glsl) | sed -e 's/^/\"/;s/$$/\\n\"/' | tr -d '\r' >> $@
	$(Q)echo ";" >> $@

$(BUILD_DIR)/engine/renderer2/%.o:
	$(echo_cmd) "RENDERER_CC $@"
	$(eval S := $(call SOURCE_FILE,engine,$(ENGINE_SOURCE)))
	$(Q)$(CC) -o $@ $(CLIENT_CFLAGS) $(ENGINE_CFLAGS) -c $S

$(BUILD_DIR)/engine/server/%.o:
	$(echo_cmd) "SERVER_CC $@"
	$(eval S := $(call SOURCE_FILE,engine,$(ENGINE_SOURCE)))
	$(Q)$(CC) -o $@ $(CLIENT_CFLAGS) $(ENGINE_CFLAGS) -c $S

$(BUILD_DIR)/engine/qcommon/%.o:
	$(echo_cmd) "COMMON_CC $@"
	$(eval S := $(call SOURCE_FILE,engine,$(ENGINE_SOURCE)))
	$(Q)$(CC) -o $@ $(CLIENT_CFLAGS) $(ENGINE_CFLAGS) -c $S

BOTLIB_CFLAGS          := $(ENGINE_CFLAGS) -DBOTLIB 

$(BUILD_DIR)/engine/botlib/%.o:
	$(echo_cmd) "BOTLIB_CC $@"
	$(eval S := $(call SOURCE_FILE,engine,$(ENGINE_SOURCE)))
	$(Q)$(CC) -o $@ $(CLIENT_CFLAGS) $(BOTLIB_CFLAGS) -c $S

$(BUILD_DIR)/engine/wasm/%.o:
	$(echo_cmd) "SYSTEM_CC $@"
	$(eval S := $(call SOURCE_FILE,engine,$(ENGINE_SOURCE)))
	$(Q)$(CC) -o $@ $(CLIENT_CFLAGS) $(ENGINE_CFLAGS) -c $S

############# MISC ###################


define DO_SAFE_MOVE
	-$(Q)$(MOVE) $< $<.bak 2> /dev/null
	$(Q)$(MOVE) $@ $< 2> /dev/null
	-$(Q)$(UNLINK) $<.bak 2> /dev/null
endef

clean: 
	-$(Q)$(addprefix $(REMOVE) $(BUILD_DIR)/,$(addsuffix /*  ; ,$(WORKDIRS)))
	-$(Q)$(addprefix $(REMOVE) $(BUILD_DIR)/,$(addsuffix  ; ,$(TARGETS)))

# TODO: this is the kind of thing perfect for a prolog transpiler, 
#   personal NO-NO, language inside a language
$(BUILD_DIR)/%.mkdir: $(filter $(MAKECMDGOALS),clean) 
	@if [ ! -d "./$(subst .mkdir,,$@)/$$dir" ]; \
		then $(MKDIR) "./$(subst .mkdir,,$@)/$$dir";fi;



